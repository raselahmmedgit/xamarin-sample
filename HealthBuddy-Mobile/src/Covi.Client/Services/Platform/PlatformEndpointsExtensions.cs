// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Covi.Client.Services.Platform
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for PlatformEndpoints.
    /// </summary>
    public static partial class PlatformEndpointsExtensions
    {
            /// <summary>
            /// Registers the user.
            /// </summary>
            /// <remarks>
            /// Called on initial registration. Validates the uniqueness of the username.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static LoginResponse RegisterUser(this IPlatformEndpoints operations, LoginRequest body = default(LoginRequest))
            {
                return operations.RegisterUserAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Registers the user.
            /// </summary>
            /// <remarks>
            /// Called on initial registration. Validates the uniqueness of the username.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LoginResponse> RegisterUserAsync(this IPlatformEndpoints operations, LoginRequest body = default(LoginRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RegisterUserWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Refreshes the access token.
            /// </summary>
            /// <remarks>
            /// Called when the access token has to be refreshed.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static TokenResponse RefreshToken(this IPlatformEndpoints operations, RefreshTokenRequest body = default(RefreshTokenRequest))
            {
                return operations.RefreshTokenAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Refreshes the access token.
            /// </summary>
            /// <remarks>
            /// Called when the access token has to be refreshed.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TokenResponse> RefreshTokenAsync(this IPlatformEndpoints operations, RefreshTokenRequest body = default(RefreshTokenRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RefreshTokenWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Logins the user.
            /// </summary>
            /// <remarks>
            /// Called when an existing user reinstalls the app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static LoginResponse Login(this IPlatformEndpoints operations, LoginRequest body = default(LoginRequest))
            {
                return operations.LoginAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Logins the user.
            /// </summary>
            /// <remarks>
            /// Called when an existing user reinstalls the app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LoginResponse> LoginAsync(this IPlatformEndpoints operations, LoginRequest body = default(LoginRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.LoginWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Logout the user.
            /// </summary>
            /// <remarks>
            /// Called when accessToken and refreshToken have to be revoked.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static void LogoutUser(this IPlatformEndpoints operations, RefreshTokenRequest body = default(RefreshTokenRequest))
            {
                operations.LogoutUserAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Logout the user.
            /// </summary>
            /// <remarks>
            /// Called when accessToken and refreshToken have to be revoked.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task LogoutUserAsync(this IPlatformEndpoints operations, RefreshTokenRequest body = default(RefreshTokenRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.LogoutUserWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Deletes the user.
            /// </summary>
            /// <remarks>
            /// Called when account and related data have to be removed.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void DeleteUser(this IPlatformEndpoints operations)
            {
                operations.DeleteUserAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the user.
            /// </summary>
            /// <remarks>
            /// Called when account and related data have to be removed.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteUserAsync(this IPlatformEndpoints operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteUserWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets the user profile.
            /// </summary>
            /// <remarks>
            /// Called whenever the mobile needs the user account, status and application
            /// metadata.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static UserProfileResponse GetUserProfile(this IPlatformEndpoints operations, string lang = default(string))
            {
                return operations.GetUserProfileAsync(lang).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the user profile.
            /// </summary>
            /// <remarks>
            /// Called whenever the mobile needs the user account, status and application
            /// metadata.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UserProfileResponse> GetUserProfileAsync(this IPlatformEndpoints operations, string lang = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUserProfileWithHttpMessagesAsync(lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Setups push notifications.
            /// </summary>
            /// <remarks>
            /// Called by the mobile to share the push notification token and mobile OS
            /// identification.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static void SetupNotifications(this IPlatformEndpoints operations, NotificationInfo body = default(NotificationInfo))
            {
                operations.SetupNotificationsAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Setups push notifications.
            /// </summary>
            /// <remarks>
            /// Called by the mobile to share the push notification token and mobile OS
            /// identification.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task SetupNotificationsAsync(this IPlatformEndpoints operations, NotificationInfo body = default(NotificationInfo), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.SetupNotificationsWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets the application metadata.
            /// </summary>
            /// <remarks>
            /// Called to get the application metadata.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static MetadataResponse GetApplicationMetadata(this IPlatformEndpoints operations, string lang = default(string))
            {
                return operations.GetApplicationMetadataAsync(lang).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the application metadata.
            /// </summary>
            /// <remarks>
            /// Called to get the application metadata.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MetadataResponse> GetApplicationMetadataAsync(this IPlatformEndpoints operations, string lang = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetApplicationMetadataWithHttpMessagesAsync(lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the newsfeed articles.
            /// </summary>
            /// <remarks>
            /// Called to get the newsfeed articles by specified filter parameters.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='filter'>
            /// </param>
            public static NewsfeedArticles GetArticles(this IPlatformEndpoints operations, string filter)
            {
                return operations.GetArticlesAsync(filter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the newsfeed articles.
            /// </summary>
            /// <remarks>
            /// Called to get the newsfeed articles by specified filter parameters.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='filter'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<NewsfeedArticles> GetArticlesAsync(this IPlatformEndpoints operations, string filter, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetArticlesWithHttpMessagesAsync(filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the article by id.
            /// </summary>
            /// <remarks>
            /// Called to get the article by id.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static Article GetArticleById(this IPlatformEndpoints operations, string id, string lang = default(string))
            {
                return operations.GetArticleByIdAsync(id, lang).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the article by id.
            /// </summary>
            /// <remarks>
            /// Called to get the article by id.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Article> GetArticleByIdAsync(this IPlatformEndpoints operations, string id, string lang = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetArticleByIdWithHttpMessagesAsync(id, lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the About Us article.
            /// </summary>
            /// <remarks>
            /// Called to get the About Us article.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static UtilityArticle GetAboutUs(this IPlatformEndpoints operations, string lang = default(string))
            {
                return operations.GetAboutUsAsync(lang).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the About Us article.
            /// </summary>
            /// <remarks>
            /// Called to get the About Us article.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UtilityArticle> GetAboutUsAsync(this IPlatformEndpoints operations, string lang = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAboutUsWithHttpMessagesAsync(lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the Privacy Policy article.
            /// </summary>
            /// <remarks>
            /// Called to get the Privacy Policy article.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            public static UtilityArticle GetPrivacyPolicy(this IPlatformEndpoints operations, string lang = default(string))
            {
                return operations.GetPrivacyPolicyAsync(lang).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the Privacy Policy article.
            /// </summary>
            /// <remarks>
            /// Called to get the Privacy Policy article.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UtilityArticle> GetPrivacyPolicyAsync(this IPlatformEndpoints operations, string lang = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPrivacyPolicyWithHttpMessagesAsync(lang, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the image by id.
            /// </summary>
            /// <remarks>
            /// Called to get the article image with specified size by id.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='width'>
            /// </param>
            /// <param name='height'>
            /// </param>
            public static string GetImageById(this IPlatformEndpoints operations, string id, int? width = 1500, int? height = 600)
            {
                return operations.GetImageByIdAsync(id, width, height).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the image by id.
            /// </summary>
            /// <remarks>
            /// Called to get the article image with specified size by id.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='width'>
            /// </param>
            /// <param name='height'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> GetImageByIdAsync(this IPlatformEndpoints operations, string id, int? width = 1500, int? height = 600, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetImageByIdWithHttpMessagesAsync(id, width, height, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
