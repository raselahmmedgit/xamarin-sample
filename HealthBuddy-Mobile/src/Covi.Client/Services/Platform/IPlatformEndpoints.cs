// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Covi.Client.Services.Platform
{
    using Microsoft.Rest;
    using Models;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Available API's.
    /// </summary>
    public partial interface IPlatformEndpoints : System.IDisposable
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        System.Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        JsonSerializerSettings SerializationSettings { get; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        JsonSerializerSettings DeserializationSettings { get; }

        /// <summary>
        /// </summary>
        string APIAcceptLanguage { get; set; }


        /// <summary>
        /// Registers the user.
        /// </summary>
        /// <remarks>
        /// Called on initial registration. Validates the uniqueness of the
        /// username.
        /// </remarks>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<LoginResponse>> RegisterUserWithHttpMessagesAsync(LoginRequest body = default(LoginRequest), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Refreshes the access token.
        /// </summary>
        /// <remarks>
        /// Called when the access token has to be refreshed.
        /// </remarks>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<TokenResponse>> RefreshTokenWithHttpMessagesAsync(RefreshTokenRequest body = default(RefreshTokenRequest), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Logins the user.
        /// </summary>
        /// <remarks>
        /// Called when an existing user reinstalls the app.
        /// </remarks>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<LoginResponse>> LoginWithHttpMessagesAsync(LoginRequest body = default(LoginRequest), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Logout the user.
        /// </summary>
        /// <remarks>
        /// Called when accessToken and refreshToken have to be revoked.
        /// </remarks>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> LogoutUserWithHttpMessagesAsync(RefreshTokenRequest body = default(RefreshTokenRequest), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes the user.
        /// </summary>
        /// <remarks>
        /// Called when account and related data have to be removed.
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DeleteUserWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the user profile.
        /// </summary>
        /// <remarks>
        /// Called whenever the mobile needs the user account, status and
        /// application metadata.
        /// </remarks>
        /// <param name='lang'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<UserProfileResponse>> GetUserProfileWithHttpMessagesAsync(string lang = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Setups push notifications.
        /// </summary>
        /// <remarks>
        /// Called by the mobile to share the push notification token and
        /// mobile OS identification.
        /// </remarks>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> SetupNotificationsWithHttpMessagesAsync(NotificationInfo body = default(NotificationInfo), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the application metadata.
        /// </summary>
        /// <remarks>
        /// Called to get the application metadata.
        /// </remarks>
        /// <param name='lang'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<MetadataResponse>> GetApplicationMetadataWithHttpMessagesAsync(string lang = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the newsfeed articles.
        /// </summary>
        /// <remarks>
        /// Called to get the newsfeed articles by specified filter parameters.
        /// </remarks>
        /// <param name='filter'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<NewsfeedArticles>> GetArticlesWithHttpMessagesAsync(string filter, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the article by id.
        /// </summary>
        /// <remarks>
        /// Called to get the article by id.
        /// </remarks>
        /// <param name='id'>
        /// </param>
        /// <param name='lang'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Article>> GetArticleByIdWithHttpMessagesAsync(string id, string lang = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the About Us article.
        /// </summary>
        /// <remarks>
        /// Called to get the About Us article.
        /// </remarks>
        /// <param name='lang'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<UtilityArticle>> GetAboutUsWithHttpMessagesAsync(string lang = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the Privacy Policy article.
        /// </summary>
        /// <remarks>
        /// Called to get the Privacy Policy article.
        /// </remarks>
        /// <param name='lang'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<UtilityArticle>> GetPrivacyPolicyWithHttpMessagesAsync(string lang = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the image by id.
        /// </summary>
        /// <remarks>
        /// Called to get the article image with specified size by id.
        /// </remarks>
        /// <param name='id'>
        /// </param>
        /// <param name='width'>
        /// </param>
        /// <param name='height'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> GetImageByIdWithHttpMessagesAsync(string id, int? width = 1500, int? height = 600, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

    }
}
